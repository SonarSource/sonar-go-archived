plugins {
    id 'java'
    id 'jacoco'
    id 'com.github.johnrengelman.shadow' version '2.0.2'
}

compileJava {
    sourceCompatibility = 1.8
    targetCompatibility = 1.8
    options.encoding = "UTF-8"
}

compileTestJava.options.encoding = "UTF-8"

dependencies {
    compile project(':common-rule-engine')
    // dependency on uast-generator-go binaries
    runtime files(project(':uast-generator-go').buildDir)

    compile     'com.google.code.gson:gson'
    compileOnly 'com.google.code.findbugs:jsr305'
    compile     'org.sonarsource.analyzer-commons:sonar-analyzer-commons'
    compile     'org.sonarsource.sonarqube:sonar-plugin-api'

    testCompile 'org.mockito:mockito-core'
    testCompile 'org.assertj:assertj-core'
    testCompile 'org.junit.jupiter:junit-jupiter-api'
    testCompile 'org.junit.jupiter:junit-jupiter-migrationsupport'
    testCompile 'org.awaitility:awaitility:3.1.0'
    testRuntime 'org.junit.jupiter:junit-jupiter-engine'
}

test {
    useJUnitPlatform()
    testLogging {
        exceptionFormat 'full' // log the full stack trace (default is the 1st line of the stack trace)
        events "skipped", "failed" // verbose log for failed and skipped tests (by default the name of the tests are not logged)
    }
}

jar {
    manifest {
        attributes(
                'Plugin-Key': 'go',
                'Plugin-Version': version,
                'Plugin-Class': 'org.sonar.go.plugin.GoPlugin',
                'Plugin-ChildFirstClassLoader': 'false',
                'Sonar-Version': '6.7',
                'SonarLint-Supported': 'false',
                'Plugin-Name': 'SonarGo',
                'Plugin-License': 'GNU LGPL 3'
        )
    }
}

task sourcesJar(type: Jar, dependsOn: classes) {
    classifier = 'sources'
    from sourceSets.main.allSource
}

task javadocJar(type: Jar, dependsOn: javadoc) {
    classifier = 'javadoc'
    from javadoc.destinationDir
}

shadowJar {
    exclude 'META-INF/**/*'
    dependencies {
        exclude(dependency('org.sonarsource.sonarqube:sonar-plugin-api'))
        exclude(dependency('org.codehaus.woodstox:.*'))
        exclude(dependency('org.codehaus.staxmate:.*'))
        exclude(dependency('com.google.code.findbugs:jsr305'))
    }
}

artifacts {
    archives shadowJar
}

artifactoryPublish.skip false

publishing {
    publications {
        mavenJava(MavenPublication) {
            artifact source: shadowJar, classifier: null
            artifact sourcesJar
            artifact javadocJar
        }
    }
}
