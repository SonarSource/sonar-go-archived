(*ast.File) {
  Doc: (*ast.CommentGroup)(nil),
  Package: token.Pos(1),
  Name: (*ast.Ident) {
      NamePos: token.Pos(9),
      Name: "NoHardcodedCredentialsCheck",
      Obj: (*ast.Object)(nil)
    },
  Decls: []ast.Decl{
    (*ast.FuncDecl) {
        Doc: (*ast.CommentGroup)(nil),
        Recv: (*ast.FieldList)(nil),
        Name: (*ast.Ident) {
            NamePos: token.Pos(43),
            Name: "test",
            Obj: (*ast.Object) {
                Kind: ast.ObjKind(5),
                Name: "test",
                Decl: <REC(*ast.FuncDecl)>,
                Data: interface{}(nil),
                Type: interface{}(nil)
              }
          },
        Type: (*ast.FuncType) {
            Func: token.Pos(38),
            Params: (*ast.FieldList) {
                Opening: token.Pos(47),
                List: []*ast.Field(nil),
                Closing: token.Pos(48)
              },
            Results: (*ast.FieldList)(nil)
          },
        Body: (*ast.BlockStmt) {
            Lbrace: token.Pos(51),
            List: []ast.Stmt{
              (*ast.AssignStmt) {
                  Lhs: []ast.Expr{
                    (*ast.Ident) {
                        NamePos: token.Pos(54),
                        Name: "pwd",
                        Obj: (*ast.Object) {
                            Kind: ast.ObjKind(4),
                            Name: "pwd",
                            Decl: <REC(*ast.AssignStmt)>,
                            Data: interface{}(nil),
                            Type: interface{}(nil)
                          }
                      }
                    },
                  TokPos: token.Pos(58),
                  Tok: token.Token(47),
                  Rhs: []ast.Expr{
                    (*ast.BasicLit) {
                        ValuePos: token.Pos(61),
                        Kind: token.Token(9),
                        Value: "\"supersecret\""
                      }
                    }
                },
              (*ast.AssignStmt) {
                  Lhs: []ast.Expr{
                    (*ast.Ident) {
                        NamePos: token.Pos(92),
                        Name: "myPassword",
                        Obj: (*ast.Object) {
                            Kind: ast.ObjKind(4),
                            Name: "myPassword",
                            Decl: <REC(*ast.AssignStmt)>,
                            Data: interface{}(nil),
                            Type: interface{}(nil)
                          }
                      }
                    },
                  TokPos: token.Pos(103),
                  Tok: token.Token(47),
                  Rhs: []ast.Expr{
                    (*ast.BasicLit) {
                        ValuePos: token.Pos(106),
                        Kind: token.Token(9),
                        Value: "\"supersecret\""
                      }
                    }
                },
              (*ast.AssignStmt) {
                  Lhs: []ast.Expr{
                    (*ast.Ident) {
                        NamePos: token.Pos(137),
                        Name: "myPassword",
                        Obj: (*ast.Object) {
                            Kind: ast.ObjKind(4),
                            Name: "myPassword",
                            Decl: (*ast.AssignStmt) {
                                Lhs: []ast.Expr{
                                  (*ast.Ident) {
                                      NamePos: token.Pos(92),
                                      Name: "myPassword",
                                      Obj: <REC(*ast.Object)>
                                    }
                                  },
                                TokPos: token.Pos(103),
                                Tok: token.Token(47),
                                Rhs: []ast.Expr{
                                  (*ast.BasicLit) {
                                      ValuePos: token.Pos(106),
                                      Kind: token.Token(9),
                                      Value: "\"supersecret\""
                                    }
                                  }
                              },
                            Data: interface{}(nil),
                            Type: interface{}(nil)
                          }
                      }
                    },
                  TokPos: token.Pos(148),
                  Tok: token.Token(47),
                  Rhs: []ast.Expr{
                    (*ast.BasicLit) {
                        ValuePos: token.Pos(151),
                        Kind: token.Token(9),
                        Value: "\"\""
                      }
                    }
                },
              (*ast.AssignStmt) {
                  Lhs: []ast.Expr{
                    (*ast.Ident) {
                        NamePos: token.Pos(171),
                        Name: "url",
                        Obj: (*ast.Object) {
                            Kind: ast.ObjKind(4),
                            Name: "url",
                            Decl: <REC(*ast.AssignStmt)>,
                            Data: interface{}(nil),
                            Type: interface{}(nil)
                          }
                      }
                    },
                  TokPos: token.Pos(175),
                  Tok: token.Token(47),
                  Rhs: []ast.Expr{
                    (*ast.BasicLit) {
                        ValuePos: token.Pos(178),
                        Kind: token.Token(9),
                        Value: "\"login=user&passwd=secret\""
                      }
                    }
                },
              (*ast.AssignStmt) {
                  Lhs: []ast.Expr{
                    (*ast.Ident) {
                        NamePos: token.Pos(222),
                        Name: "url",
                        Obj: (*ast.Object) {
                            Kind: ast.ObjKind(4),
                            Name: "url",
                            Decl: (*ast.AssignStmt) {
                                Lhs: []ast.Expr{
                                  (*ast.Ident) {
                                      NamePos: token.Pos(171),
                                      Name: "url",
                                      Obj: <REC(*ast.Object)>
                                    }
                                  },
                                TokPos: token.Pos(175),
                                Tok: token.Token(47),
                                Rhs: []ast.Expr{
                                  (*ast.BasicLit) {
                                      ValuePos: token.Pos(178),
                                      Kind: token.Token(9),
                                      Value: "\"login=user&passwd=secret\""
                                    }
                                  }
                              },
                            Data: interface{}(nil),
                            Type: interface{}(nil)
                          }
                      }
                    },
                  TokPos: token.Pos(226),
                  Tok: token.Token(42),
                  Rhs: []ast.Expr{
                    (*ast.BasicLit) {
                        ValuePos: token.Pos(228),
                        Kind: token.Token(9),
                        Value: "\"login=user&passwd=\""
                      }
                    }
                }
              },
            Rbrace: token.Pos(263)
          }
      },
    (*ast.FuncDecl) {
        Doc: (*ast.CommentGroup)(nil),
        Recv: (*ast.FieldList)(nil),
        Name: (*ast.Ident) {
            NamePos: token.Pos(271),
            Name: "explicitDecl",
            Obj: (*ast.Object) {
                Kind: ast.ObjKind(5),
                Name: "explicitDecl",
                Decl: <REC(*ast.FuncDecl)>,
                Data: interface{}(nil),
                Type: interface{}(nil)
              }
          },
        Type: (*ast.FuncType) {
            Func: token.Pos(266),
            Params: (*ast.FieldList) {
                Opening: token.Pos(283),
                List: []*ast.Field(nil),
                Closing: token.Pos(284)
              },
            Results: (*ast.FieldList)(nil)
          },
        Body: (*ast.BlockStmt) {
            Lbrace: token.Pos(287),
            List: []ast.Stmt{
              (*ast.DeclStmt) {
                  Decl: (*ast.GenDecl) {
                      Doc: (*ast.CommentGroup)(nil),
                      TokPos: token.Pos(290),
                      Tok: token.Token(85),
                      Lparen: token.Pos(0),
                      Specs: []ast.Spec{
                        (*ast.ValueSpec) {
                            Doc: (*ast.CommentGroup)(nil),
                            Names: []*ast.Ident{
                              (*ast.Ident) {
                                  NamePos: token.Pos(294),
                                  Name: "pwd",
                                  Obj: (*ast.Object) {
                                      Kind: ast.ObjKind(4),
                                      Name: "pwd",
                                      Decl: <REC(*ast.ValueSpec)>,
                                      Data: 0,
                                      Type: interface{}(nil)
                                    }
                                }
                              },
                            Type: (*ast.Ident) {
                                NamePos: token.Pos(298),
                                Name: "string",
                                Obj: (*ast.Object)(nil)
                              },
                            Values: []ast.Expr(nil),
                            Comment: (*ast.CommentGroup)(nil)
                          }
                        },
                      Rparen: token.Pos(0)
                    }
                },
              (*ast.AssignStmt) {
                  Lhs: []ast.Expr{
                    (*ast.Ident) {
                        NamePos: token.Pos(306),
                        Name: "pwd",
                        Obj: (*ast.Object) {
                            Kind: ast.ObjKind(4),
                            Name: "pwd",
                            Decl: (*ast.ValueSpec) {
                                Doc: (*ast.CommentGroup)(nil),
                                Names: []*ast.Ident{
                                  (*ast.Ident) {
                                      NamePos: token.Pos(294),
                                      Name: "pwd",
                                      Obj: <REC(*ast.Object)>
                                    }
                                  },
                                Type: (*ast.Ident) {
                                    NamePos: token.Pos(298),
                                    Name: "string",
                                    Obj: (*ast.Object)(nil)
                                  },
                                Values: []ast.Expr(nil),
                                Comment: (*ast.CommentGroup)(nil)
                              },
                            Data: 0,
                            Type: interface{}(nil)
                          }
                      }
                    },
                  TokPos: token.Pos(310),
                  Tok: token.Token(42),
                  Rhs: []ast.Expr{
                    (*ast.BasicLit) {
                        ValuePos: token.Pos(312),
                        Kind: token.Token(9),
                        Value: "\"secret\""
                      }
                    }
                }
              },
            Rbrace: token.Pos(338)
          }
      }
    },
  Scope: (*ast.Scope) {
      Outer: (*ast.Scope)(nil),
      Objects: map[string]*ast.Object{
        "explicitDecl": (*ast.Object) {
              Kind: ast.ObjKind(5),
              Name: "explicitDecl",
              Decl: (*ast.FuncDecl) {
                  Doc: (*ast.CommentGroup)(nil),
                  Recv: (*ast.FieldList)(nil),
                  Name: (*ast.Ident) {
                      NamePos: token.Pos(271),
                      Name: "explicitDecl",
                      Obj: <REC(*ast.Object)>
                    },
                  Type: (*ast.FuncType) {
                      Func: token.Pos(266),
                      Params: (*ast.FieldList) {
                          Opening: token.Pos(283),
                          List: []*ast.Field(nil),
                          Closing: token.Pos(284)
                        },
                      Results: (*ast.FieldList)(nil)
                    },
                  Body: (*ast.BlockStmt) {
                      Lbrace: token.Pos(287),
                      List: []ast.Stmt{
                        (*ast.DeclStmt) {
                            Decl: (*ast.GenDecl) {
                                Doc: (*ast.CommentGroup)(nil),
                                TokPos: token.Pos(290),
                                Tok: token.Token(85),
                                Lparen: token.Pos(0),
                                Specs: []ast.Spec{
                                  (*ast.ValueSpec) {
                                      Doc: (*ast.CommentGroup)(nil),
                                      Names: []*ast.Ident{
                                        (*ast.Ident) {
                                            NamePos: token.Pos(294),
                                            Name: "pwd",
                                            Obj: (*ast.Object) {
                                                Kind: ast.ObjKind(4),
                                                Name: "pwd",
                                                Decl: <REC(*ast.ValueSpec)>,
                                                Data: 0,
                                                Type: interface{}(nil)
                                              }
                                          }
                                        },
                                      Type: (*ast.Ident) {
                                          NamePos: token.Pos(298),
                                          Name: "string",
                                          Obj: (*ast.Object)(nil)
                                        },
                                      Values: []ast.Expr(nil),
                                      Comment: (*ast.CommentGroup)(nil)
                                    }
                                  },
                                Rparen: token.Pos(0)
                              }
                          },
                        (*ast.AssignStmt) {
                            Lhs: []ast.Expr{
                              (*ast.Ident) {
                                  NamePos: token.Pos(306),
                                  Name: "pwd",
                                  Obj: (*ast.Object) {
                                      Kind: ast.ObjKind(4),
                                      Name: "pwd",
                                      Decl: (*ast.ValueSpec) {
                                          Doc: (*ast.CommentGroup)(nil),
                                          Names: []*ast.Ident{
                                            (*ast.Ident) {
                                                NamePos: token.Pos(294),
                                                Name: "pwd",
                                                Obj: <REC(*ast.Object)>
                                              }
                                            },
                                          Type: (*ast.Ident) {
                                              NamePos: token.Pos(298),
                                              Name: "string",
                                              Obj: (*ast.Object)(nil)
                                            },
                                          Values: []ast.Expr(nil),
                                          Comment: (*ast.CommentGroup)(nil)
                                        },
                                      Data: 0,
                                      Type: interface{}(nil)
                                    }
                                }
                              },
                            TokPos: token.Pos(310),
                            Tok: token.Token(42),
                            Rhs: []ast.Expr{
                              (*ast.BasicLit) {
                                  ValuePos: token.Pos(312),
                                  Kind: token.Token(9),
                                  Value: "\"secret\""
                                }
                              }
                          }
                        },
                      Rbrace: token.Pos(338)
                    }
                },
              Data: interface{}(nil),
              Type: interface{}(nil)
            },
        "test": (*ast.Object) {
              Kind: ast.ObjKind(5),
              Name: "test",
              Decl: (*ast.FuncDecl) {
                  Doc: (*ast.CommentGroup)(nil),
                  Recv: (*ast.FieldList)(nil),
                  Name: (*ast.Ident) {
                      NamePos: token.Pos(43),
                      Name: "test",
                      Obj: <REC(*ast.Object)>
                    },
                  Type: (*ast.FuncType) {
                      Func: token.Pos(38),
                      Params: (*ast.FieldList) {
                          Opening: token.Pos(47),
                          List: []*ast.Field(nil),
                          Closing: token.Pos(48)
                        },
                      Results: (*ast.FieldList)(nil)
                    },
                  Body: (*ast.BlockStmt) {
                      Lbrace: token.Pos(51),
                      List: []ast.Stmt{
                        (*ast.AssignStmt) {
                            Lhs: []ast.Expr{
                              (*ast.Ident) {
                                  NamePos: token.Pos(54),
                                  Name: "pwd",
                                  Obj: (*ast.Object) {
                                      Kind: ast.ObjKind(4),
                                      Name: "pwd",
                                      Decl: <REC(*ast.AssignStmt)>,
                                      Data: interface{}(nil),
                                      Type: interface{}(nil)
                                    }
                                }
                              },
                            TokPos: token.Pos(58),
                            Tok: token.Token(47),
                            Rhs: []ast.Expr{
                              (*ast.BasicLit) {
                                  ValuePos: token.Pos(61),
                                  Kind: token.Token(9),
                                  Value: "\"supersecret\""
                                }
                              }
                          },
                        (*ast.AssignStmt) {
                            Lhs: []ast.Expr{
                              (*ast.Ident) {
                                  NamePos: token.Pos(92),
                                  Name: "myPassword",
                                  Obj: (*ast.Object) {
                                      Kind: ast.ObjKind(4),
                                      Name: "myPassword",
                                      Decl: <REC(*ast.AssignStmt)>,
                                      Data: interface{}(nil),
                                      Type: interface{}(nil)
                                    }
                                }
                              },
                            TokPos: token.Pos(103),
                            Tok: token.Token(47),
                            Rhs: []ast.Expr{
                              (*ast.BasicLit) {
                                  ValuePos: token.Pos(106),
                                  Kind: token.Token(9),
                                  Value: "\"supersecret\""
                                }
                              }
                          },
                        (*ast.AssignStmt) {
                            Lhs: []ast.Expr{
                              (*ast.Ident) {
                                  NamePos: token.Pos(137),
                                  Name: "myPassword",
                                  Obj: (*ast.Object) {
                                      Kind: ast.ObjKind(4),
                                      Name: "myPassword",
                                      Decl: (*ast.AssignStmt) {
                                          Lhs: []ast.Expr{
                                            (*ast.Ident) {
                                                NamePos: token.Pos(92),
                                                Name: "myPassword",
                                                Obj: <REC(*ast.Object)>
                                              }
                                            },
                                          TokPos: token.Pos(103),
                                          Tok: token.Token(47),
                                          Rhs: []ast.Expr{
                                            (*ast.BasicLit) {
                                                ValuePos: token.Pos(106),
                                                Kind: token.Token(9),
                                                Value: "\"supersecret\""
                                              }
                                            }
                                        },
                                      Data: interface{}(nil),
                                      Type: interface{}(nil)
                                    }
                                }
                              },
                            TokPos: token.Pos(148),
                            Tok: token.Token(47),
                            Rhs: []ast.Expr{
                              (*ast.BasicLit) {
                                  ValuePos: token.Pos(151),
                                  Kind: token.Token(9),
                                  Value: "\"\""
                                }
                              }
                          },
                        (*ast.AssignStmt) {
                            Lhs: []ast.Expr{
                              (*ast.Ident) {
                                  NamePos: token.Pos(171),
                                  Name: "url",
                                  Obj: (*ast.Object) {
                                      Kind: ast.ObjKind(4),
                                      Name: "url",
                                      Decl: <REC(*ast.AssignStmt)>,
                                      Data: interface{}(nil),
                                      Type: interface{}(nil)
                                    }
                                }
                              },
                            TokPos: token.Pos(175),
                            Tok: token.Token(47),
                            Rhs: []ast.Expr{
                              (*ast.BasicLit) {
                                  ValuePos: token.Pos(178),
                                  Kind: token.Token(9),
                                  Value: "\"login=user&passwd=secret\""
                                }
                              }
                          },
                        (*ast.AssignStmt) {
                            Lhs: []ast.Expr{
                              (*ast.Ident) {
                                  NamePos: token.Pos(222),
                                  Name: "url",
                                  Obj: (*ast.Object) {
                                      Kind: ast.ObjKind(4),
                                      Name: "url",
                                      Decl: (*ast.AssignStmt) {
                                          Lhs: []ast.Expr{
                                            (*ast.Ident) {
                                                NamePos: token.Pos(171),
                                                Name: "url",
                                                Obj: <REC(*ast.Object)>
                                              }
                                            },
                                          TokPos: token.Pos(175),
                                          Tok: token.Token(47),
                                          Rhs: []ast.Expr{
                                            (*ast.BasicLit) {
                                                ValuePos: token.Pos(178),
                                                Kind: token.Token(9),
                                                Value: "\"login=user&passwd=secret\""
                                              }
                                            }
                                        },
                                      Data: interface{}(nil),
                                      Type: interface{}(nil)
                                    }
                                }
                              },
                            TokPos: token.Pos(226),
                            Tok: token.Token(42),
                            Rhs: []ast.Expr{
                              (*ast.BasicLit) {
                                  ValuePos: token.Pos(228),
                                  Kind: token.Token(9),
                                  Value: "\"login=user&passwd=\""
                                }
                              }
                          }
                        },
                      Rbrace: token.Pos(263)
                    }
                },
              Data: interface{}(nil),
              Type: interface{}(nil)
            }
        }
    },
  Imports: []*ast.ImportSpec(nil),
  Unresolved: []*ast.Ident{
    (*ast.Ident) {
        NamePos: token.Pos(298),
        Name: "string",
        Obj: (*ast.Object)(nil)
      }
    },
  Comments: []*ast.CommentGroup{
    (*ast.CommentGroup) {
        List: []*ast.Comment{
          (*ast.Comment) {
              Slash: token.Pos(75),
              Text: "// Noncompliant"
            }
          }
      },
    (*ast.CommentGroup) {
        List: []*ast.Comment{
          (*ast.Comment) {
              Slash: token.Pos(120),
              Text: "// Noncompliant"
            }
          }
      },
    (*ast.CommentGroup) {
        List: []*ast.Comment{
          (*ast.Comment) {
              Slash: token.Pos(154),
              Text: "// Empty is OK"
            }
          }
      },
    (*ast.CommentGroup) {
        List: []*ast.Comment{
          (*ast.Comment) {
              Slash: token.Pos(205),
              Text: "// Noncompliant"
            }
          }
      },
    (*ast.CommentGroup) {
        List: []*ast.Comment{
          (*ast.Comment) {
              Slash: token.Pos(249),
              Text: "// This is OK"
            }
          }
      },
    (*ast.CommentGroup) {
        List: []*ast.Comment{
          (*ast.Comment) {
              Slash: token.Pos(322),
              Text: "// Noncompliant"
            }
          }
      }
    }
}
