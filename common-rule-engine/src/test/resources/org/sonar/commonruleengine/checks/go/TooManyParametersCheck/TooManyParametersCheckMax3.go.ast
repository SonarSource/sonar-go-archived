(*ast.File) {
  Doc: (*ast.CommentGroup)(nil),
  Package: token.Pos(1),
  Name: (*ast.Ident) {
      NamePos: token.Pos(9),
      Name: "main",
      Obj: (*ast.Object)(nil)
    },
  Decls: []ast.Decl{
    (*ast.FuncDecl) {
        Doc: (*ast.CommentGroup)(nil),
        Recv: (*ast.FieldList)(nil),
        Name: (*ast.Ident) {
            NamePos: token.Pos(20),
            Name: "nonCompliantFun1",
            Obj: (*ast.Object) {
                Kind: ast.ObjKind(5),
                Name: "nonCompliantFun1",
                Decl: <REC(*ast.FuncDecl)>,
                Data: interface{}(nil),
                Type: interface{}(nil)
              }
          },
        Type: (*ast.FuncType) {
            Func: token.Pos(15),
            Params: (*ast.FieldList) {
                Opening: token.Pos(36),
                List: []*ast.Field{
                  (*ast.Field) {
                      Doc: (*ast.CommentGroup)(nil),
                      Names: []*ast.Ident{
                        (*ast.Ident) {
                            NamePos: token.Pos(37),
                            Name: "p1",
                            Obj: (*ast.Object) {
                                Kind: ast.ObjKind(4),
                                Name: "p1",
                                Decl: <REC(*ast.Field)>,
                                Data: interface{}(nil),
                                Type: interface{}(nil)
                              }
                          },
                        (*ast.Ident) {
                            NamePos: token.Pos(41),
                            Name: "p2",
                            Obj: (*ast.Object) {
                                Kind: ast.ObjKind(4),
                                Name: "p2",
                                Decl: <REC(*ast.Field)>,
                                Data: interface{}(nil),
                                Type: interface{}(nil)
                              }
                          },
                        (*ast.Ident) {
                            NamePos: token.Pos(45),
                            Name: "p3",
                            Obj: (*ast.Object) {
                                Kind: ast.ObjKind(4),
                                Name: "p3",
                                Decl: <REC(*ast.Field)>,
                                Data: interface{}(nil),
                                Type: interface{}(nil)
                              }
                          },
                        (*ast.Ident) {
                            NamePos: token.Pos(49),
                            Name: "p4",
                            Obj: (*ast.Object) {
                                Kind: ast.ObjKind(4),
                                Name: "p4",
                                Decl: <REC(*ast.Field)>,
                                Data: interface{}(nil),
                                Type: interface{}(nil)
                              }
                          }
                        },
                      Type: (*ast.Ident) {
                          NamePos: token.Pos(52),
                          Name: "int",
                          Obj: (*ast.Object)(nil)
                        },
                      Tag: (*ast.BasicLit)(nil),
                      Comment: (*ast.CommentGroup)(nil)
                    }
                  },
                Closing: token.Pos(55)
              },
            Results: (*ast.FieldList)(nil)
          },
        Body: (*ast.BlockStmt) {
            Lbrace: token.Pos(57),
            List: []ast.Stmt(nil),
            Rbrace: token.Pos(76)
          }
      },
    (*ast.FuncDecl) {
        Doc: (*ast.CommentGroup)(nil),
        Recv: (*ast.FieldList)(nil),
        Name: (*ast.Ident) {
            NamePos: token.Pos(84),
            Name: "nonCompliantFun2",
            Obj: (*ast.Object) {
                Kind: ast.ObjKind(5),
                Name: "nonCompliantFun2",
                Decl: <REC(*ast.FuncDecl)>,
                Data: interface{}(nil),
                Type: interface{}(nil)
              }
          },
        Type: (*ast.FuncType) {
            Func: token.Pos(79),
            Params: (*ast.FieldList) {
                Opening: token.Pos(100),
                List: []*ast.Field{
                  (*ast.Field) {
                      Doc: (*ast.CommentGroup)(nil),
                      Names: []*ast.Ident{
                        (*ast.Ident) {
                            NamePos: token.Pos(101),
                            Name: "p1",
                            Obj: (*ast.Object) {
                                Kind: ast.ObjKind(4),
                                Name: "p1",
                                Decl: <REC(*ast.Field)>,
                                Data: interface{}(nil),
                                Type: interface{}(nil)
                              }
                          },
                        (*ast.Ident) {
                            NamePos: token.Pos(105),
                            Name: "p2",
                            Obj: (*ast.Object) {
                                Kind: ast.ObjKind(4),
                                Name: "p2",
                                Decl: <REC(*ast.Field)>,
                                Data: interface{}(nil),
                                Type: interface{}(nil)
                              }
                          }
                        },
                      Type: (*ast.Ident) {
                          NamePos: token.Pos(108),
                          Name: "int",
                          Obj: (*ast.Object)(nil)
                        },
                      Tag: (*ast.BasicLit)(nil),
                      Comment: (*ast.CommentGroup)(nil)
                    },
                  (*ast.Field) {
                      Doc: (*ast.CommentGroup)(nil),
                      Names: []*ast.Ident{
                        (*ast.Ident) {
                            NamePos: token.Pos(113),
                            Name: "p3",
                            Obj: (*ast.Object) {
                                Kind: ast.ObjKind(4),
                                Name: "p3",
                                Decl: <REC(*ast.Field)>,
                                Data: interface{}(nil),
                                Type: interface{}(nil)
                              }
                          },
                        (*ast.Ident) {
                            NamePos: token.Pos(117),
                            Name: "p4",
                            Obj: (*ast.Object) {
                                Kind: ast.ObjKind(4),
                                Name: "p4",
                                Decl: <REC(*ast.Field)>,
                                Data: interface{}(nil),
                                Type: interface{}(nil)
                              }
                          }
                        },
                      Type: (*ast.Ident) {
                          NamePos: token.Pos(120),
                          Name: "string",
                          Obj: (*ast.Object)(nil)
                        },
                      Tag: (*ast.BasicLit)(nil),
                      Comment: (*ast.CommentGroup)(nil)
                    }
                  },
                Closing: token.Pos(126)
              },
            Results: (*ast.FieldList)(nil)
          },
        Body: (*ast.BlockStmt) {
            Lbrace: token.Pos(128),
            List: []ast.Stmt(nil),
            Rbrace: token.Pos(147)
          }
      },
    (*ast.FuncDecl) {
        Doc: (*ast.CommentGroup)(nil),
        Recv: (*ast.FieldList)(nil),
        Name: (*ast.Ident) {
            NamePos: token.Pos(155),
            Name: "compliantFun1",
            Obj: (*ast.Object) {
                Kind: ast.ObjKind(5),
                Name: "compliantFun1",
                Decl: <REC(*ast.FuncDecl)>,
                Data: interface{}(nil),
                Type: interface{}(nil)
              }
          },
        Type: (*ast.FuncType) {
            Func: token.Pos(150),
            Params: (*ast.FieldList) {
                Opening: token.Pos(168),
                List: []*ast.Field{
                  (*ast.Field) {
                      Doc: (*ast.CommentGroup)(nil),
                      Names: []*ast.Ident{
                        (*ast.Ident) {
                            NamePos: token.Pos(169),
                            Name: "p1",
                            Obj: (*ast.Object) {
                                Kind: ast.ObjKind(4),
                                Name: "p1",
                                Decl: <REC(*ast.Field)>,
                                Data: interface{}(nil),
                                Type: interface{}(nil)
                              }
                          },
                        (*ast.Ident) {
                            NamePos: token.Pos(173),
                            Name: "p2",
                            Obj: (*ast.Object) {
                                Kind: ast.ObjKind(4),
                                Name: "p2",
                                Decl: <REC(*ast.Field)>,
                                Data: interface{}(nil),
                                Type: interface{}(nil)
                              }
                          },
                        (*ast.Ident) {
                            NamePos: token.Pos(177),
                            Name: "p3",
                            Obj: (*ast.Object) {
                                Kind: ast.ObjKind(4),
                                Name: "p3",
                                Decl: <REC(*ast.Field)>,
                                Data: interface{}(nil),
                                Type: interface{}(nil)
                              }
                          }
                        },
                      Type: (*ast.Ident) {
                          NamePos: token.Pos(180),
                          Name: "int",
                          Obj: (*ast.Object)(nil)
                        },
                      Tag: (*ast.BasicLit)(nil),
                      Comment: (*ast.CommentGroup)(nil)
                    }
                  },
                Closing: token.Pos(183)
              },
            Results: (*ast.FieldList)(nil)
          },
        Body: (*ast.BlockStmt) {
            Lbrace: token.Pos(185),
            List: []ast.Stmt(nil),
            Rbrace: token.Pos(187)
          }
      },
    (*ast.FuncDecl) {
        Doc: (*ast.CommentGroup)(nil),
        Recv: (*ast.FieldList)(nil),
        Name: (*ast.Ident) {
            NamePos: token.Pos(195),
            Name: "compliantFun2",
            Obj: (*ast.Object) {
                Kind: ast.ObjKind(5),
                Name: "compliantFun2",
                Decl: <REC(*ast.FuncDecl)>,
                Data: interface{}(nil),
                Type: interface{}(nil)
              }
          },
        Type: (*ast.FuncType) {
            Func: token.Pos(190),
            Params: (*ast.FieldList) {
                Opening: token.Pos(208),
                List: []*ast.Field{
                  (*ast.Field) {
                      Doc: (*ast.CommentGroup)(nil),
                      Names: []*ast.Ident{
                        (*ast.Ident) {
                            NamePos: token.Pos(209),
                            Name: "p1",
                            Obj: (*ast.Object) {
                                Kind: ast.ObjKind(4),
                                Name: "p1",
                                Decl: <REC(*ast.Field)>,
                                Data: interface{}(nil),
                                Type: interface{}(nil)
                              }
                          },
                        (*ast.Ident) {
                            NamePos: token.Pos(213),
                            Name: "p2",
                            Obj: (*ast.Object) {
                                Kind: ast.ObjKind(4),
                                Name: "p2",
                                Decl: <REC(*ast.Field)>,
                                Data: interface{}(nil),
                                Type: interface{}(nil)
                              }
                          }
                        },
                      Type: (*ast.Ident) {
                          NamePos: token.Pos(216),
                          Name: "int",
                          Obj: (*ast.Object)(nil)
                        },
                      Tag: (*ast.BasicLit)(nil),
                      Comment: (*ast.CommentGroup)(nil)
                    },
                  (*ast.Field) {
                      Doc: (*ast.CommentGroup)(nil),
                      Names: []*ast.Ident{
                        (*ast.Ident) {
                            NamePos: token.Pos(221),
                            Name: "p3",
                            Obj: (*ast.Object) {
                                Kind: ast.ObjKind(4),
                                Name: "p3",
                                Decl: <REC(*ast.Field)>,
                                Data: interface{}(nil),
                                Type: interface{}(nil)
                              }
                          }
                        },
                      Type: (*ast.Ident) {
                          NamePos: token.Pos(224),
                          Name: "string",
                          Obj: (*ast.Object)(nil)
                        },
                      Tag: (*ast.BasicLit)(nil),
                      Comment: (*ast.CommentGroup)(nil)
                    }
                  },
                Closing: token.Pos(230)
              },
            Results: (*ast.FieldList)(nil)
          },
        Body: (*ast.BlockStmt) {
            Lbrace: token.Pos(232),
            List: []ast.Stmt(nil),
            Rbrace: token.Pos(234)
          }
      }
    },
  Scope: (*ast.Scope) {
      Outer: (*ast.Scope)(nil),
      Objects: map[string]*ast.Object{
        "compliantFun1": (*ast.Object) {
              Kind: ast.ObjKind(5),
              Name: "compliantFun1",
              Decl: (*ast.FuncDecl) {
                  Doc: (*ast.CommentGroup)(nil),
                  Recv: (*ast.FieldList)(nil),
                  Name: (*ast.Ident) {
                      NamePos: token.Pos(155),
                      Name: "compliantFun1",
                      Obj: <REC(*ast.Object)>
                    },
                  Type: (*ast.FuncType) {
                      Func: token.Pos(150),
                      Params: (*ast.FieldList) {
                          Opening: token.Pos(168),
                          List: []*ast.Field{
                            (*ast.Field) {
                                Doc: (*ast.CommentGroup)(nil),
                                Names: []*ast.Ident{
                                  (*ast.Ident) {
                                      NamePos: token.Pos(169),
                                      Name: "p1",
                                      Obj: (*ast.Object) {
                                          Kind: ast.ObjKind(4),
                                          Name: "p1",
                                          Decl: <REC(*ast.Field)>,
                                          Data: interface{}(nil),
                                          Type: interface{}(nil)
                                        }
                                    },
                                  (*ast.Ident) {
                                      NamePos: token.Pos(173),
                                      Name: "p2",
                                      Obj: (*ast.Object) {
                                          Kind: ast.ObjKind(4),
                                          Name: "p2",
                                          Decl: <REC(*ast.Field)>,
                                          Data: interface{}(nil),
                                          Type: interface{}(nil)
                                        }
                                    },
                                  (*ast.Ident) {
                                      NamePos: token.Pos(177),
                                      Name: "p3",
                                      Obj: (*ast.Object) {
                                          Kind: ast.ObjKind(4),
                                          Name: "p3",
                                          Decl: <REC(*ast.Field)>,
                                          Data: interface{}(nil),
                                          Type: interface{}(nil)
                                        }
                                    }
                                  },
                                Type: (*ast.Ident) {
                                    NamePos: token.Pos(180),
                                    Name: "int",
                                    Obj: (*ast.Object)(nil)
                                  },
                                Tag: (*ast.BasicLit)(nil),
                                Comment: (*ast.CommentGroup)(nil)
                              }
                            },
                          Closing: token.Pos(183)
                        },
                      Results: (*ast.FieldList)(nil)
                    },
                  Body: (*ast.BlockStmt) {
                      Lbrace: token.Pos(185),
                      List: []ast.Stmt(nil),
                      Rbrace: token.Pos(187)
                    }
                },
              Data: interface{}(nil),
              Type: interface{}(nil)
            },
        "compliantFun2": (*ast.Object) {
              Kind: ast.ObjKind(5),
              Name: "compliantFun2",
              Decl: (*ast.FuncDecl) {
                  Doc: (*ast.CommentGroup)(nil),
                  Recv: (*ast.FieldList)(nil),
                  Name: (*ast.Ident) {
                      NamePos: token.Pos(195),
                      Name: "compliantFun2",
                      Obj: <REC(*ast.Object)>
                    },
                  Type: (*ast.FuncType) {
                      Func: token.Pos(190),
                      Params: (*ast.FieldList) {
                          Opening: token.Pos(208),
                          List: []*ast.Field{
                            (*ast.Field) {
                                Doc: (*ast.CommentGroup)(nil),
                                Names: []*ast.Ident{
                                  (*ast.Ident) {
                                      NamePos: token.Pos(209),
                                      Name: "p1",
                                      Obj: (*ast.Object) {
                                          Kind: ast.ObjKind(4),
                                          Name: "p1",
                                          Decl: <REC(*ast.Field)>,
                                          Data: interface{}(nil),
                                          Type: interface{}(nil)
                                        }
                                    },
                                  (*ast.Ident) {
                                      NamePos: token.Pos(213),
                                      Name: "p2",
                                      Obj: (*ast.Object) {
                                          Kind: ast.ObjKind(4),
                                          Name: "p2",
                                          Decl: <REC(*ast.Field)>,
                                          Data: interface{}(nil),
                                          Type: interface{}(nil)
                                        }
                                    }
                                  },
                                Type: (*ast.Ident) {
                                    NamePos: token.Pos(216),
                                    Name: "int",
                                    Obj: (*ast.Object)(nil)
                                  },
                                Tag: (*ast.BasicLit)(nil),
                                Comment: (*ast.CommentGroup)(nil)
                              },
                            (*ast.Field) {
                                Doc: (*ast.CommentGroup)(nil),
                                Names: []*ast.Ident{
                                  (*ast.Ident) {
                                      NamePos: token.Pos(221),
                                      Name: "p3",
                                      Obj: (*ast.Object) {
                                          Kind: ast.ObjKind(4),
                                          Name: "p3",
                                          Decl: <REC(*ast.Field)>,
                                          Data: interface{}(nil),
                                          Type: interface{}(nil)
                                        }
                                    }
                                  },
                                Type: (*ast.Ident) {
                                    NamePos: token.Pos(224),
                                    Name: "string",
                                    Obj: (*ast.Object)(nil)
                                  },
                                Tag: (*ast.BasicLit)(nil),
                                Comment: (*ast.CommentGroup)(nil)
                              }
                            },
                          Closing: token.Pos(230)
                        },
                      Results: (*ast.FieldList)(nil)
                    },
                  Body: (*ast.BlockStmt) {
                      Lbrace: token.Pos(232),
                      List: []ast.Stmt(nil),
                      Rbrace: token.Pos(234)
                    }
                },
              Data: interface{}(nil),
              Type: interface{}(nil)
            },
        "nonCompliantFun1": (*ast.Object) {
              Kind: ast.ObjKind(5),
              Name: "nonCompliantFun1",
              Decl: (*ast.FuncDecl) {
                  Doc: (*ast.CommentGroup)(nil),
                  Recv: (*ast.FieldList)(nil),
                  Name: (*ast.Ident) {
                      NamePos: token.Pos(20),
                      Name: "nonCompliantFun1",
                      Obj: <REC(*ast.Object)>
                    },
                  Type: (*ast.FuncType) {
                      Func: token.Pos(15),
                      Params: (*ast.FieldList) {
                          Opening: token.Pos(36),
                          List: []*ast.Field{
                            (*ast.Field) {
                                Doc: (*ast.CommentGroup)(nil),
                                Names: []*ast.Ident{
                                  (*ast.Ident) {
                                      NamePos: token.Pos(37),
                                      Name: "p1",
                                      Obj: (*ast.Object) {
                                          Kind: ast.ObjKind(4),
                                          Name: "p1",
                                          Decl: <REC(*ast.Field)>,
                                          Data: interface{}(nil),
                                          Type: interface{}(nil)
                                        }
                                    },
                                  (*ast.Ident) {
                                      NamePos: token.Pos(41),
                                      Name: "p2",
                                      Obj: (*ast.Object) {
                                          Kind: ast.ObjKind(4),
                                          Name: "p2",
                                          Decl: <REC(*ast.Field)>,
                                          Data: interface{}(nil),
                                          Type: interface{}(nil)
                                        }
                                    },
                                  (*ast.Ident) {
                                      NamePos: token.Pos(45),
                                      Name: "p3",
                                      Obj: (*ast.Object) {
                                          Kind: ast.ObjKind(4),
                                          Name: "p3",
                                          Decl: <REC(*ast.Field)>,
                                          Data: interface{}(nil),
                                          Type: interface{}(nil)
                                        }
                                    },
                                  (*ast.Ident) {
                                      NamePos: token.Pos(49),
                                      Name: "p4",
                                      Obj: (*ast.Object) {
                                          Kind: ast.ObjKind(4),
                                          Name: "p4",
                                          Decl: <REC(*ast.Field)>,
                                          Data: interface{}(nil),
                                          Type: interface{}(nil)
                                        }
                                    }
                                  },
                                Type: (*ast.Ident) {
                                    NamePos: token.Pos(52),
                                    Name: "int",
                                    Obj: (*ast.Object)(nil)
                                  },
                                Tag: (*ast.BasicLit)(nil),
                                Comment: (*ast.CommentGroup)(nil)
                              }
                            },
                          Closing: token.Pos(55)
                        },
                      Results: (*ast.FieldList)(nil)
                    },
                  Body: (*ast.BlockStmt) {
                      Lbrace: token.Pos(57),
                      List: []ast.Stmt(nil),
                      Rbrace: token.Pos(76)
                    }
                },
              Data: interface{}(nil),
              Type: interface{}(nil)
            },
        "nonCompliantFun2": (*ast.Object) {
              Kind: ast.ObjKind(5),
              Name: "nonCompliantFun2",
              Decl: (*ast.FuncDecl) {
                  Doc: (*ast.CommentGroup)(nil),
                  Recv: (*ast.FieldList)(nil),
                  Name: (*ast.Ident) {
                      NamePos: token.Pos(84),
                      Name: "nonCompliantFun2",
                      Obj: <REC(*ast.Object)>
                    },
                  Type: (*ast.FuncType) {
                      Func: token.Pos(79),
                      Params: (*ast.FieldList) {
                          Opening: token.Pos(100),
                          List: []*ast.Field{
                            (*ast.Field) {
                                Doc: (*ast.CommentGroup)(nil),
                                Names: []*ast.Ident{
                                  (*ast.Ident) {
                                      NamePos: token.Pos(101),
                                      Name: "p1",
                                      Obj: (*ast.Object) {
                                          Kind: ast.ObjKind(4),
                                          Name: "p1",
                                          Decl: <REC(*ast.Field)>,
                                          Data: interface{}(nil),
                                          Type: interface{}(nil)
                                        }
                                    },
                                  (*ast.Ident) {
                                      NamePos: token.Pos(105),
                                      Name: "p2",
                                      Obj: (*ast.Object) {
                                          Kind: ast.ObjKind(4),
                                          Name: "p2",
                                          Decl: <REC(*ast.Field)>,
                                          Data: interface{}(nil),
                                          Type: interface{}(nil)
                                        }
                                    }
                                  },
                                Type: (*ast.Ident) {
                                    NamePos: token.Pos(108),
                                    Name: "int",
                                    Obj: (*ast.Object)(nil)
                                  },
                                Tag: (*ast.BasicLit)(nil),
                                Comment: (*ast.CommentGroup)(nil)
                              },
                            (*ast.Field) {
                                Doc: (*ast.CommentGroup)(nil),
                                Names: []*ast.Ident{
                                  (*ast.Ident) {
                                      NamePos: token.Pos(113),
                                      Name: "p3",
                                      Obj: (*ast.Object) {
                                          Kind: ast.ObjKind(4),
                                          Name: "p3",
                                          Decl: <REC(*ast.Field)>,
                                          Data: interface{}(nil),
                                          Type: interface{}(nil)
                                        }
                                    },
                                  (*ast.Ident) {
                                      NamePos: token.Pos(117),
                                      Name: "p4",
                                      Obj: (*ast.Object) {
                                          Kind: ast.ObjKind(4),
                                          Name: "p4",
                                          Decl: <REC(*ast.Field)>,
                                          Data: interface{}(nil),
                                          Type: interface{}(nil)
                                        }
                                    }
                                  },
                                Type: (*ast.Ident) {
                                    NamePos: token.Pos(120),
                                    Name: "string",
                                    Obj: (*ast.Object)(nil)
                                  },
                                Tag: (*ast.BasicLit)(nil),
                                Comment: (*ast.CommentGroup)(nil)
                              }
                            },
                          Closing: token.Pos(126)
                        },
                      Results: (*ast.FieldList)(nil)
                    },
                  Body: (*ast.BlockStmt) {
                      Lbrace: token.Pos(128),
                      List: []ast.Stmt(nil),
                      Rbrace: token.Pos(147)
                    }
                },
              Data: interface{}(nil),
              Type: interface{}(nil)
            }
        }
    },
  Imports: []*ast.ImportSpec(nil),
  Unresolved: []*ast.Ident{
    (*ast.Ident) {
        NamePos: token.Pos(52),
        Name: "int",
        Obj: (*ast.Object)(nil)
      },
    (*ast.Ident) {
        NamePos: token.Pos(108),
        Name: "int",
        Obj: (*ast.Object)(nil)
      },
    (*ast.Ident) {
        NamePos: token.Pos(120),
        Name: "string",
        Obj: (*ast.Object)(nil)
      },
    (*ast.Ident) {
        NamePos: token.Pos(180),
        Name: "int",
        Obj: (*ast.Object)(nil)
      },
    (*ast.Ident) {
        NamePos: token.Pos(216),
        Name: "int",
        Obj: (*ast.Object)(nil)
      },
    (*ast.Ident) {
        NamePos: token.Pos(224),
        Name: "string",
        Obj: (*ast.Object)(nil)
      }
    },
  Comments: []*ast.CommentGroup{
    (*ast.CommentGroup) {
        List: []*ast.Comment{
          (*ast.Comment) {
              Slash: token.Pos(60),
              Text: "// Noncompliant"
            }
          }
      },
    (*ast.CommentGroup) {
        List: []*ast.Comment{
          (*ast.Comment) {
              Slash: token.Pos(131),
              Text: "// Noncompliant"
            }
          }
      }
    }
}
