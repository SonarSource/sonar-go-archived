(*ast.File) {
  Doc: (*ast.CommentGroup)(nil),
  Package: token.Pos(1),
  Name: (*ast.Ident) {
      NamePos: token.Pos(9),
      Name: "test",
      Obj: (*ast.Object)(nil)
    },
  Decls: []ast.Decl{
    (*ast.GenDecl) {
        Doc: (*ast.CommentGroup)(nil),
        TokPos: token.Pos(15),
        Tok: token.Token(75),
        Lparen: token.Pos(0),
        Specs: []ast.Spec{
          (*ast.ImportSpec) {
              Doc: (*ast.CommentGroup)(nil),
              Name: (*ast.Ident)(nil),
              Path: (*ast.BasicLit) {
                  ValuePos: token.Pos(22),
                  Kind: token.Token(9),
                  Value: "\"fmt\""
                },
              Comment: (*ast.CommentGroup)(nil),
              EndPos: token.Pos(0)
            }
          },
        Rparen: token.Pos(0)
      },
    (*ast.FuncDecl) {
        Doc: (*ast.CommentGroup)(nil),
        Recv: (*ast.FieldList)(nil),
        Name: (*ast.Ident) {
            NamePos: token.Pos(34),
            Name: "FooSwitch",
            Obj: (*ast.Object) {
                Kind: ast.ObjKind(5),
                Name: "FooSwitch",
                Decl: <REC(*ast.FuncDecl)>,
                Data: interface{}(nil),
                Type: interface{}(nil)
              }
          },
        Type: (*ast.FuncType) {
            Func: token.Pos(29),
            Params: (*ast.FieldList) {
                Opening: token.Pos(43),
                List: []*ast.Field{
                  (*ast.Field) {
                      Doc: (*ast.CommentGroup)(nil),
                      Names: []*ast.Ident{
                        (*ast.Ident) {
                            NamePos: token.Pos(44),
                            Name: "param",
                            Obj: (*ast.Object) {
                                Kind: ast.ObjKind(4),
                                Name: "param",
                                Decl: <REC(*ast.Field)>,
                                Data: interface{}(nil),
                                Type: interface{}(nil)
                              }
                          }
                        },
                      Type: (*ast.Ident) {
                          NamePos: token.Pos(50),
                          Name: "int",
                          Obj: (*ast.Object)(nil)
                        },
                      Tag: (*ast.BasicLit)(nil),
                      Comment: (*ast.CommentGroup)(nil)
                    }
                  },
                Closing: token.Pos(53)
              },
            Results: (*ast.FieldList)(nil)
          },
        Body: (*ast.BlockStmt) {
            Lbrace: token.Pos(55),
            List: []ast.Stmt{
              (*ast.SwitchStmt) {
                  Switch: token.Pos(58),
                  Init: ast.Stmt(nil),
                  Tag: (*ast.Ident) {
                      NamePos: token.Pos(65),
                      Name: "true",
                      Obj: (*ast.Object)(nil)
                    },
                  Body: (*ast.BlockStmt) {
                      Lbrace: token.Pos(70),
                      List: []ast.Stmt{
                        (*ast.CaseClause) {
                            Case: token.Pos(73),
                            List: []ast.Expr{
                              (*ast.BinaryExpr) {
                                  X: (*ast.Ident) {
                                      NamePos: token.Pos(78),
                                      Name: "param",
                                      Obj: (*ast.Object) {
                                          Kind: ast.ObjKind(4),
                                          Name: "param",
                                          Decl: (*ast.Field) {
                                              Doc: (*ast.CommentGroup)(nil),
                                              Names: []*ast.Ident{
                                                (*ast.Ident) {
                                                    NamePos: token.Pos(44),
                                                    Name: "param",
                                                    Obj: <REC(*ast.Object)>
                                                  }
                                                },
                                              Type: (*ast.Ident) {
                                                  NamePos: token.Pos(50),
                                                  Name: "int",
                                                  Obj: (*ast.Object)(nil)
                                                },
                                              Tag: (*ast.BasicLit)(nil),
                                              Comment: (*ast.CommentGroup)(nil)
                                            },
                                          Data: interface{}(nil),
                                          Type: interface{}(nil)
                                        }
                                    },
                                  OpPos: token.Pos(84),
                                  Op: token.Token(41),
                                  Y: (*ast.BasicLit) {
                                      ValuePos: token.Pos(86),
                                      Kind: token.Token(5),
                                      Value: "1"
                                    }
                                }
                              },
                            Colon: token.Pos(87),
                            Body: []ast.Stmt{
                              (*ast.ExprStmt) {
                                  X: (*ast.CallExpr) {
                                      Fun: (*ast.SelectorExpr) {
                                          X: (*ast.Ident) {
                                              NamePos: token.Pos(91),
                                              Name: "fmt",
                                              Obj: (*ast.Object)(nil)
                                            },
                                          Sel: (*ast.Ident) {
                                              NamePos: token.Pos(95),
                                              Name: "Println",
                                              Obj: (*ast.Object)(nil)
                                            }
                                        },
                                      Lparen: token.Pos(102),
                                      Args: []ast.Expr{
                                        (*ast.BasicLit) {
                                            ValuePos: token.Pos(103),
                                            Kind: token.Token(9),
                                            Value: "\">1\""
                                          }
                                        },
                                      Ellipsis: token.Pos(0),
                                      Rparen: token.Pos(107)
                                    }
                                }
                              }
                          },
                        (*ast.CaseClause) {
                            Case: token.Pos(110),
                            List: []ast.Expr{
                              (*ast.BinaryExpr) {
                                  X: (*ast.Ident) {
                                      NamePos: token.Pos(115),
                                      Name: "param",
                                      Obj: (*ast.Object) {
                                          Kind: ast.ObjKind(4),
                                          Name: "param",
                                          Decl: (*ast.Field) {
                                              Doc: (*ast.CommentGroup)(nil),
                                              Names: []*ast.Ident{
                                                (*ast.Ident) {
                                                    NamePos: token.Pos(44),
                                                    Name: "param",
                                                    Obj: <REC(*ast.Object)>
                                                  }
                                                },
                                              Type: (*ast.Ident) {
                                                  NamePos: token.Pos(50),
                                                  Name: "int",
                                                  Obj: (*ast.Object)(nil)
                                                },
                                              Tag: (*ast.BasicLit)(nil),
                                              Comment: (*ast.CommentGroup)(nil)
                                            },
                                          Data: interface{}(nil),
                                          Type: interface{}(nil)
                                        }
                                    },
                                  OpPos: token.Pos(121),
                                  Op: token.Token(40),
                                  Y: (*ast.BasicLit) {
                                      ValuePos: token.Pos(123),
                                      Kind: token.Token(5),
                                      Value: "1"
                                    }
                                }
                              },
                            Colon: token.Pos(124),
                            Body: []ast.Stmt{
                              (*ast.ExprStmt) {
                                  X: (*ast.CallExpr) {
                                      Fun: (*ast.SelectorExpr) {
                                          X: (*ast.Ident) {
                                              NamePos: token.Pos(128),
                                              Name: "fmt",
                                              Obj: (*ast.Object)(nil)
                                            },
                                          Sel: (*ast.Ident) {
                                              NamePos: token.Pos(132),
                                              Name: "Println",
                                              Obj: (*ast.Object)(nil)
                                            }
                                        },
                                      Lparen: token.Pos(139),
                                      Args: []ast.Expr{
                                        (*ast.BasicLit) {
                                            ValuePos: token.Pos(140),
                                            Kind: token.Token(9),
                                            Value: "\"<1\""
                                          }
                                        },
                                      Ellipsis: token.Pos(0),
                                      Rparen: token.Pos(144)
                                    }
                                }
                              }
                          },
                        (*ast.CaseClause) {
                            Case: token.Pos(147),
                            List: []ast.Expr{
                              (*ast.BinaryExpr) {
                                  X: (*ast.Ident) {
                                      NamePos: token.Pos(152),
                                      Name: "param",
                                      Obj: (*ast.Object) {
                                          Kind: ast.ObjKind(4),
                                          Name: "param",
                                          Decl: (*ast.Field) {
                                              Doc: (*ast.CommentGroup)(nil),
                                              Names: []*ast.Ident{
                                                (*ast.Ident) {
                                                    NamePos: token.Pos(44),
                                                    Name: "param",
                                                    Obj: <REC(*ast.Object)>
                                                  }
                                                },
                                              Type: (*ast.Ident) {
                                                  NamePos: token.Pos(50),
                                                  Name: "int",
                                                  Obj: (*ast.Object)(nil)
                                                },
                                              Tag: (*ast.BasicLit)(nil),
                                              Comment: (*ast.CommentGroup)(nil)
                                            },
                                          Data: interface{}(nil),
                                          Type: interface{}(nil)
                                        }
                                    },
                                  OpPos: token.Pos(158),
                                  Op: token.Token(41),
                                  Y: (*ast.BasicLit) {
                                      ValuePos: token.Pos(160),
                                      Kind: token.Token(5),
                                      Value: "1"
                                    }
                                }
                              },
                            Colon: token.Pos(161),
                            Body: []ast.Stmt{
                              (*ast.ExprStmt) {
                                  X: (*ast.CallExpr) {
                                      Fun: (*ast.SelectorExpr) {
                                          X: (*ast.Ident) {
                                              NamePos: token.Pos(182),
                                              Name: "fmt",
                                              Obj: (*ast.Object)(nil)
                                            },
                                          Sel: (*ast.Ident) {
                                              NamePos: token.Pos(186),
                                              Name: "Println",
                                              Obj: (*ast.Object)(nil)
                                            }
                                        },
                                      Lparen: token.Pos(193),
                                      Args: []ast.Expr{
                                        (*ast.BasicLit) {
                                            ValuePos: token.Pos(194),
                                            Kind: token.Token(9),
                                            Value: "\"impossible\""
                                          }
                                        },
                                      Ellipsis: token.Pos(0),
                                      Rparen: token.Pos(206)
                                    }
                                }
                              }
                          }
                        },
                      Rbrace: token.Pos(209)
                    }
                }
              },
            Rbrace: token.Pos(211)
          }
      },
    (*ast.FuncDecl) {
        Doc: (*ast.CommentGroup)(nil),
        Recv: (*ast.FieldList)(nil),
        Name: (*ast.Ident) {
            NamePos: token.Pos(219),
            Name: "SwitchWithMultipleConditions",
            Obj: (*ast.Object) {
                Kind: ast.ObjKind(5),
                Name: "SwitchWithMultipleConditions",
                Decl: <REC(*ast.FuncDecl)>,
                Data: interface{}(nil),
                Type: interface{}(nil)
              }
          },
        Type: (*ast.FuncType) {
            Func: token.Pos(214),
            Params: (*ast.FieldList) {
                Opening: token.Pos(247),
                List: []*ast.Field{
                  (*ast.Field) {
                      Doc: (*ast.CommentGroup)(nil),
                      Names: []*ast.Ident{
                        (*ast.Ident) {
                            NamePos: token.Pos(248),
                            Name: "param",
                            Obj: (*ast.Object) {
                                Kind: ast.ObjKind(4),
                                Name: "param",
                                Decl: <REC(*ast.Field)>,
                                Data: interface{}(nil),
                                Type: interface{}(nil)
                              }
                          }
                        },
                      Type: (*ast.Ident) {
                          NamePos: token.Pos(254),
                          Name: "int",
                          Obj: (*ast.Object)(nil)
                        },
                      Tag: (*ast.BasicLit)(nil),
                      Comment: (*ast.CommentGroup)(nil)
                    }
                  },
                Closing: token.Pos(257)
              },
            Results: (*ast.FieldList)(nil)
          },
        Body: (*ast.BlockStmt) {
            Lbrace: token.Pos(259),
            List: []ast.Stmt{
              (*ast.SwitchStmt) {
                  Switch: token.Pos(262),
                  Init: ast.Stmt(nil),
                  Tag: (*ast.Ident) {
                      NamePos: token.Pos(269),
                      Name: "param",
                      Obj: (*ast.Object) {
                          Kind: ast.ObjKind(4),
                          Name: "param",
                          Decl: (*ast.Field) {
                              Doc: (*ast.CommentGroup)(nil),
                              Names: []*ast.Ident{
                                (*ast.Ident) {
                                    NamePos: token.Pos(248),
                                    Name: "param",
                                    Obj: <REC(*ast.Object)>
                                  }
                                },
                              Type: (*ast.Ident) {
                                  NamePos: token.Pos(254),
                                  Name: "int",
                                  Obj: (*ast.Object)(nil)
                                },
                              Tag: (*ast.BasicLit)(nil),
                              Comment: (*ast.CommentGroup)(nil)
                            },
                          Data: interface{}(nil),
                          Type: interface{}(nil)
                        }
                    },
                  Body: (*ast.BlockStmt) {
                      Lbrace: token.Pos(275),
                      List: []ast.Stmt{
                        (*ast.CaseClause) {
                            Case: token.Pos(278),
                            List: []ast.Expr{
                              (*ast.BasicLit) {
                                  ValuePos: token.Pos(283),
                                  Kind: token.Token(5),
                                  Value: "1"
                                },
                              (*ast.BasicLit) {
                                  ValuePos: token.Pos(285),
                                  Kind: token.Token(5),
                                  Value: "2"
                                },
                              (*ast.BasicLit) {
                                  ValuePos: token.Pos(287),
                                  Kind: token.Token(5),
                                  Value: "3"
                                }
                              },
                            Colon: token.Pos(288),
                            Body: []ast.Stmt{
                              (*ast.ExprStmt) {
                                  X: (*ast.CallExpr) {
                                      Fun: (*ast.SelectorExpr) {
                                          X: (*ast.Ident) {
                                              NamePos: token.Pos(292),
                                              Name: "fmt",
                                              Obj: (*ast.Object)(nil)
                                            },
                                          Sel: (*ast.Ident) {
                                              NamePos: token.Pos(296),
                                              Name: "Println",
                                              Obj: (*ast.Object)(nil)
                                            }
                                        },
                                      Lparen: token.Pos(303),
                                      Args: []ast.Expr{
                                        (*ast.BasicLit) {
                                            ValuePos: token.Pos(304),
                                            Kind: token.Token(9),
                                            Value: "\">1\""
                                          }
                                        },
                                      Ellipsis: token.Pos(0),
                                      Rparen: token.Pos(308)
                                    }
                                }
                              }
                          },
                        (*ast.CaseClause) {
                            Case: token.Pos(311),
                            List: []ast.Expr{
                              (*ast.BasicLit) {
                                  ValuePos: token.Pos(316),
                                  Kind: token.Token(5),
                                  Value: "3"
                                },
                              (*ast.BasicLit) {
                                  ValuePos: token.Pos(318),
                                  Kind: token.Token(5),
                                  Value: "4"
                                },
                              (*ast.BasicLit) {
                                  ValuePos: token.Pos(320),
                                  Kind: token.Token(5),
                                  Value: "5"
                                }
                              },
                            Colon: token.Pos(321),
                            Body: []ast.Stmt{
                              (*ast.ExprStmt) {
                                  X: (*ast.CallExpr) {
                                      Fun: (*ast.SelectorExpr) {
                                          X: (*ast.Ident) {
                                              NamePos: token.Pos(346),
                                              Name: "fmt",
                                              Obj: (*ast.Object)(nil)
                                            },
                                          Sel: (*ast.Ident) {
                                              NamePos: token.Pos(350),
                                              Name: "Println",
                                              Obj: (*ast.Object)(nil)
                                            }
                                        },
                                      Lparen: token.Pos(357),
                                      Args: []ast.Expr{
                                        (*ast.BasicLit) {
                                            ValuePos: token.Pos(358),
                                            Kind: token.Token(9),
                                            Value: "\"<1\""
                                          }
                                        },
                                      Ellipsis: token.Pos(0),
                                      Rparen: token.Pos(362)
                                    }
                                }
                              }
                          }
                        },
                      Rbrace: token.Pos(365)
                    }
                }
              },
            Rbrace: token.Pos(367)
          }
      }
    },
  Scope: (*ast.Scope) {
      Outer: (*ast.Scope)(nil),
      Objects: map[string]*ast.Object{
        "FooSwitch": (*ast.Object) {
              Kind: ast.ObjKind(5),
              Name: "FooSwitch",
              Decl: (*ast.FuncDecl) {
                  Doc: (*ast.CommentGroup)(nil),
                  Recv: (*ast.FieldList)(nil),
                  Name: (*ast.Ident) {
                      NamePos: token.Pos(34),
                      Name: "FooSwitch",
                      Obj: <REC(*ast.Object)>
                    },
                  Type: (*ast.FuncType) {
                      Func: token.Pos(29),
                      Params: (*ast.FieldList) {
                          Opening: token.Pos(43),
                          List: []*ast.Field{
                            (*ast.Field) {
                                Doc: (*ast.CommentGroup)(nil),
                                Names: []*ast.Ident{
                                  (*ast.Ident) {
                                      NamePos: token.Pos(44),
                                      Name: "param",
                                      Obj: (*ast.Object) {
                                          Kind: ast.ObjKind(4),
                                          Name: "param",
                                          Decl: <REC(*ast.Field)>,
                                          Data: interface{}(nil),
                                          Type: interface{}(nil)
                                        }
                                    }
                                  },
                                Type: (*ast.Ident) {
                                    NamePos: token.Pos(50),
                                    Name: "int",
                                    Obj: (*ast.Object)(nil)
                                  },
                                Tag: (*ast.BasicLit)(nil),
                                Comment: (*ast.CommentGroup)(nil)
                              }
                            },
                          Closing: token.Pos(53)
                        },
                      Results: (*ast.FieldList)(nil)
                    },
                  Body: (*ast.BlockStmt) {
                      Lbrace: token.Pos(55),
                      List: []ast.Stmt{
                        (*ast.SwitchStmt) {
                            Switch: token.Pos(58),
                            Init: ast.Stmt(nil),
                            Tag: (*ast.Ident) {
                                NamePos: token.Pos(65),
                                Name: "true",
                                Obj: (*ast.Object)(nil)
                              },
                            Body: (*ast.BlockStmt) {
                                Lbrace: token.Pos(70),
                                List: []ast.Stmt{
                                  (*ast.CaseClause) {
                                      Case: token.Pos(73),
                                      List: []ast.Expr{
                                        (*ast.BinaryExpr) {
                                            X: (*ast.Ident) {
                                                NamePos: token.Pos(78),
                                                Name: "param",
                                                Obj: (*ast.Object) {
                                                    Kind: ast.ObjKind(4),
                                                    Name: "param",
                                                    Decl: (*ast.Field) {
                                                        Doc: (*ast.CommentGroup)(nil),
                                                        Names: []*ast.Ident{
                                                          (*ast.Ident) {
                                                              NamePos: token.Pos(44),
                                                              Name: "param",
                                                              Obj: <REC(*ast.Object)>
                                                            }
                                                          },
                                                        Type: (*ast.Ident) {
                                                            NamePos: token.Pos(50),
                                                            Name: "int",
                                                            Obj: (*ast.Object)(nil)
                                                          },
                                                        Tag: (*ast.BasicLit)(nil),
                                                        Comment: (*ast.CommentGroup)(nil)
                                                      },
                                                    Data: interface{}(nil),
                                                    Type: interface{}(nil)
                                                  }
                                              },
                                            OpPos: token.Pos(84),
                                            Op: token.Token(41),
                                            Y: (*ast.BasicLit) {
                                                ValuePos: token.Pos(86),
                                                Kind: token.Token(5),
                                                Value: "1"
                                              }
                                          }
                                        },
                                      Colon: token.Pos(87),
                                      Body: []ast.Stmt{
                                        (*ast.ExprStmt) {
                                            X: (*ast.CallExpr) {
                                                Fun: (*ast.SelectorExpr) {
                                                    X: (*ast.Ident) {
                                                        NamePos: token.Pos(91),
                                                        Name: "fmt",
                                                        Obj: (*ast.Object)(nil)
                                                      },
                                                    Sel: (*ast.Ident) {
                                                        NamePos: token.Pos(95),
                                                        Name: "Println",
                                                        Obj: (*ast.Object)(nil)
                                                      }
                                                  },
                                                Lparen: token.Pos(102),
                                                Args: []ast.Expr{
                                                  (*ast.BasicLit) {
                                                      ValuePos: token.Pos(103),
                                                      Kind: token.Token(9),
                                                      Value: "\">1\""
                                                    }
                                                  },
                                                Ellipsis: token.Pos(0),
                                                Rparen: token.Pos(107)
                                              }
                                          }
                                        }
                                    },
                                  (*ast.CaseClause) {
                                      Case: token.Pos(110),
                                      List: []ast.Expr{
                                        (*ast.BinaryExpr) {
                                            X: (*ast.Ident) {
                                                NamePos: token.Pos(115),
                                                Name: "param",
                                                Obj: (*ast.Object) {
                                                    Kind: ast.ObjKind(4),
                                                    Name: "param",
                                                    Decl: (*ast.Field) {
                                                        Doc: (*ast.CommentGroup)(nil),
                                                        Names: []*ast.Ident{
                                                          (*ast.Ident) {
                                                              NamePos: token.Pos(44),
                                                              Name: "param",
                                                              Obj: <REC(*ast.Object)>
                                                            }
                                                          },
                                                        Type: (*ast.Ident) {
                                                            NamePos: token.Pos(50),
                                                            Name: "int",
                                                            Obj: (*ast.Object)(nil)
                                                          },
                                                        Tag: (*ast.BasicLit)(nil),
                                                        Comment: (*ast.CommentGroup)(nil)
                                                      },
                                                    Data: interface{}(nil),
                                                    Type: interface{}(nil)
                                                  }
                                              },
                                            OpPos: token.Pos(121),
                                            Op: token.Token(40),
                                            Y: (*ast.BasicLit) {
                                                ValuePos: token.Pos(123),
                                                Kind: token.Token(5),
                                                Value: "1"
                                              }
                                          }
                                        },
                                      Colon: token.Pos(124),
                                      Body: []ast.Stmt{
                                        (*ast.ExprStmt) {
                                            X: (*ast.CallExpr) {
                                                Fun: (*ast.SelectorExpr) {
                                                    X: (*ast.Ident) {
                                                        NamePos: token.Pos(128),
                                                        Name: "fmt",
                                                        Obj: (*ast.Object)(nil)
                                                      },
                                                    Sel: (*ast.Ident) {
                                                        NamePos: token.Pos(132),
                                                        Name: "Println",
                                                        Obj: (*ast.Object)(nil)
                                                      }
                                                  },
                                                Lparen: token.Pos(139),
                                                Args: []ast.Expr{
                                                  (*ast.BasicLit) {
                                                      ValuePos: token.Pos(140),
                                                      Kind: token.Token(9),
                                                      Value: "\"<1\""
                                                    }
                                                  },
                                                Ellipsis: token.Pos(0),
                                                Rparen: token.Pos(144)
                                              }
                                          }
                                        }
                                    },
                                  (*ast.CaseClause) {
                                      Case: token.Pos(147),
                                      List: []ast.Expr{
                                        (*ast.BinaryExpr) {
                                            X: (*ast.Ident) {
                                                NamePos: token.Pos(152),
                                                Name: "param",
                                                Obj: (*ast.Object) {
                                                    Kind: ast.ObjKind(4),
                                                    Name: "param",
                                                    Decl: (*ast.Field) {
                                                        Doc: (*ast.CommentGroup)(nil),
                                                        Names: []*ast.Ident{
                                                          (*ast.Ident) {
                                                              NamePos: token.Pos(44),
                                                              Name: "param",
                                                              Obj: <REC(*ast.Object)>
                                                            }
                                                          },
                                                        Type: (*ast.Ident) {
                                                            NamePos: token.Pos(50),
                                                            Name: "int",
                                                            Obj: (*ast.Object)(nil)
                                                          },
                                                        Tag: (*ast.BasicLit)(nil),
                                                        Comment: (*ast.CommentGroup)(nil)
                                                      },
                                                    Data: interface{}(nil),
                                                    Type: interface{}(nil)
                                                  }
                                              },
                                            OpPos: token.Pos(158),
                                            Op: token.Token(41),
                                            Y: (*ast.BasicLit) {
                                                ValuePos: token.Pos(160),
                                                Kind: token.Token(5),
                                                Value: "1"
                                              }
                                          }
                                        },
                                      Colon: token.Pos(161),
                                      Body: []ast.Stmt{
                                        (*ast.ExprStmt) {
                                            X: (*ast.CallExpr) {
                                                Fun: (*ast.SelectorExpr) {
                                                    X: (*ast.Ident) {
                                                        NamePos: token.Pos(182),
                                                        Name: "fmt",
                                                        Obj: (*ast.Object)(nil)
                                                      },
                                                    Sel: (*ast.Ident) {
                                                        NamePos: token.Pos(186),
                                                        Name: "Println",
                                                        Obj: (*ast.Object)(nil)
                                                      }
                                                  },
                                                Lparen: token.Pos(193),
                                                Args: []ast.Expr{
                                                  (*ast.BasicLit) {
                                                      ValuePos: token.Pos(194),
                                                      Kind: token.Token(9),
                                                      Value: "\"impossible\""
                                                    }
                                                  },
                                                Ellipsis: token.Pos(0),
                                                Rparen: token.Pos(206)
                                              }
                                          }
                                        }
                                    }
                                  },
                                Rbrace: token.Pos(209)
                              }
                          }
                        },
                      Rbrace: token.Pos(211)
                    }
                },
              Data: interface{}(nil),
              Type: interface{}(nil)
            },
        "SwitchWithMultipleConditions": (*ast.Object) {
              Kind: ast.ObjKind(5),
              Name: "SwitchWithMultipleConditions",
              Decl: (*ast.FuncDecl) {
                  Doc: (*ast.CommentGroup)(nil),
                  Recv: (*ast.FieldList)(nil),
                  Name: (*ast.Ident) {
                      NamePos: token.Pos(219),
                      Name: "SwitchWithMultipleConditions",
                      Obj: <REC(*ast.Object)>
                    },
                  Type: (*ast.FuncType) {
                      Func: token.Pos(214),
                      Params: (*ast.FieldList) {
                          Opening: token.Pos(247),
                          List: []*ast.Field{
                            (*ast.Field) {
                                Doc: (*ast.CommentGroup)(nil),
                                Names: []*ast.Ident{
                                  (*ast.Ident) {
                                      NamePos: token.Pos(248),
                                      Name: "param",
                                      Obj: (*ast.Object) {
                                          Kind: ast.ObjKind(4),
                                          Name: "param",
                                          Decl: <REC(*ast.Field)>,
                                          Data: interface{}(nil),
                                          Type: interface{}(nil)
                                        }
                                    }
                                  },
                                Type: (*ast.Ident) {
                                    NamePos: token.Pos(254),
                                    Name: "int",
                                    Obj: (*ast.Object)(nil)
                                  },
                                Tag: (*ast.BasicLit)(nil),
                                Comment: (*ast.CommentGroup)(nil)
                              }
                            },
                          Closing: token.Pos(257)
                        },
                      Results: (*ast.FieldList)(nil)
                    },
                  Body: (*ast.BlockStmt) {
                      Lbrace: token.Pos(259),
                      List: []ast.Stmt{
                        (*ast.SwitchStmt) {
                            Switch: token.Pos(262),
                            Init: ast.Stmt(nil),
                            Tag: (*ast.Ident) {
                                NamePos: token.Pos(269),
                                Name: "param",
                                Obj: (*ast.Object) {
                                    Kind: ast.ObjKind(4),
                                    Name: "param",
                                    Decl: (*ast.Field) {
                                        Doc: (*ast.CommentGroup)(nil),
                                        Names: []*ast.Ident{
                                          (*ast.Ident) {
                                              NamePos: token.Pos(248),
                                              Name: "param",
                                              Obj: <REC(*ast.Object)>
                                            }
                                          },
                                        Type: (*ast.Ident) {
                                            NamePos: token.Pos(254),
                                            Name: "int",
                                            Obj: (*ast.Object)(nil)
                                          },
                                        Tag: (*ast.BasicLit)(nil),
                                        Comment: (*ast.CommentGroup)(nil)
                                      },
                                    Data: interface{}(nil),
                                    Type: interface{}(nil)
                                  }
                              },
                            Body: (*ast.BlockStmt) {
                                Lbrace: token.Pos(275),
                                List: []ast.Stmt{
                                  (*ast.CaseClause) {
                                      Case: token.Pos(278),
                                      List: []ast.Expr{
                                        (*ast.BasicLit) {
                                            ValuePos: token.Pos(283),
                                            Kind: token.Token(5),
                                            Value: "1"
                                          },
                                        (*ast.BasicLit) {
                                            ValuePos: token.Pos(285),
                                            Kind: token.Token(5),
                                            Value: "2"
                                          },
                                        (*ast.BasicLit) {
                                            ValuePos: token.Pos(287),
                                            Kind: token.Token(5),
                                            Value: "3"
                                          }
                                        },
                                      Colon: token.Pos(288),
                                      Body: []ast.Stmt{
                                        (*ast.ExprStmt) {
                                            X: (*ast.CallExpr) {
                                                Fun: (*ast.SelectorExpr) {
                                                    X: (*ast.Ident) {
                                                        NamePos: token.Pos(292),
                                                        Name: "fmt",
                                                        Obj: (*ast.Object)(nil)
                                                      },
                                                    Sel: (*ast.Ident) {
                                                        NamePos: token.Pos(296),
                                                        Name: "Println",
                                                        Obj: (*ast.Object)(nil)
                                                      }
                                                  },
                                                Lparen: token.Pos(303),
                                                Args: []ast.Expr{
                                                  (*ast.BasicLit) {
                                                      ValuePos: token.Pos(304),
                                                      Kind: token.Token(9),
                                                      Value: "\">1\""
                                                    }
                                                  },
                                                Ellipsis: token.Pos(0),
                                                Rparen: token.Pos(308)
                                              }
                                          }
                                        }
                                    },
                                  (*ast.CaseClause) {
                                      Case: token.Pos(311),
                                      List: []ast.Expr{
                                        (*ast.BasicLit) {
                                            ValuePos: token.Pos(316),
                                            Kind: token.Token(5),
                                            Value: "3"
                                          },
                                        (*ast.BasicLit) {
                                            ValuePos: token.Pos(318),
                                            Kind: token.Token(5),
                                            Value: "4"
                                          },
                                        (*ast.BasicLit) {
                                            ValuePos: token.Pos(320),
                                            Kind: token.Token(5),
                                            Value: "5"
                                          }
                                        },
                                      Colon: token.Pos(321),
                                      Body: []ast.Stmt{
                                        (*ast.ExprStmt) {
                                            X: (*ast.CallExpr) {
                                                Fun: (*ast.SelectorExpr) {
                                                    X: (*ast.Ident) {
                                                        NamePos: token.Pos(346),
                                                        Name: "fmt",
                                                        Obj: (*ast.Object)(nil)
                                                      },
                                                    Sel: (*ast.Ident) {
                                                        NamePos: token.Pos(350),
                                                        Name: "Println",
                                                        Obj: (*ast.Object)(nil)
                                                      }
                                                  },
                                                Lparen: token.Pos(357),
                                                Args: []ast.Expr{
                                                  (*ast.BasicLit) {
                                                      ValuePos: token.Pos(358),
                                                      Kind: token.Token(9),
                                                      Value: "\"<1\""
                                                    }
                                                  },
                                                Ellipsis: token.Pos(0),
                                                Rparen: token.Pos(362)
                                              }
                                          }
                                        }
                                    }
                                  },
                                Rbrace: token.Pos(365)
                              }
                          }
                        },
                      Rbrace: token.Pos(367)
                    }
                },
              Data: interface{}(nil),
              Type: interface{}(nil)
            }
        }
    },
  Imports: []*ast.ImportSpec{
    (*ast.ImportSpec) {
        Doc: (*ast.CommentGroup)(nil),
        Name: (*ast.Ident)(nil),
        Path: (*ast.BasicLit) {
            ValuePos: token.Pos(22),
            Kind: token.Token(9),
            Value: "\"fmt\""
          },
        Comment: (*ast.CommentGroup)(nil),
        EndPos: token.Pos(0)
      }
    },
  Unresolved: []*ast.Ident{
    (*ast.Ident) {
        NamePos: token.Pos(50),
        Name: "int",
        Obj: (*ast.Object)(nil)
      },
    (*ast.Ident) {
        NamePos: token.Pos(65),
        Name: "true",
        Obj: (*ast.Object)(nil)
      },
    (*ast.Ident) {
        NamePos: token.Pos(91),
        Name: "fmt",
        Obj: (*ast.Object)(nil)
      },
    (*ast.Ident) {
        NamePos: token.Pos(128),
        Name: "fmt",
        Obj: (*ast.Object)(nil)
      },
    (*ast.Ident) {
        NamePos: token.Pos(182),
        Name: "fmt",
        Obj: (*ast.Object)(nil)
      },
    (*ast.Ident) {
        NamePos: token.Pos(254),
        Name: "int",
        Obj: (*ast.Object)(nil)
      },
    (*ast.Ident) {
        NamePos: token.Pos(292),
        Name: "fmt",
        Obj: (*ast.Object)(nil)
      },
    (*ast.Ident) {
        NamePos: token.Pos(346),
        Name: "fmt",
        Obj: (*ast.Object)(nil)
      }
    },
  Comments: []*ast.CommentGroup{
    (*ast.CommentGroup) {
        List: []*ast.Comment{
          (*ast.Comment) {
              Slash: token.Pos(164),
              Text: "// Noncompliant"
            }
          }
      },
    (*ast.CommentGroup) {
        List: []*ast.Comment{
          (*ast.Comment) {
              Slash: token.Pos(328),
              Text: "// Noncompliant"
            }
          }
      }
    }
}
