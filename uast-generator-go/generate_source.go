// The following directive is necessary to make the package coherent:
// +build ignore

// This program generates 'goparser_generated.go'. It can be invoked by running
// go generate
package main

import (
	"bytes"
	"io/ioutil"
	"text/template"
	"time"
)

type HeaderTemplateArgs struct {
	Timestamp time.Time
}

var headerTemplate = template.Must(template.New("").Parse(`// Code generated by go generate; DO NOT EDIT.
// Generated by generate_source.go the {{ .Timestamp }}
package main

import (
	"go/ast"
)
`))

type ListTemplateArgs struct {
	TypeName string
	ListName string
}

var listTemplate = template.Must(template.New("").Parse(`
type {{.ListName}} []{{.TypeName}}

func (items {{.ListName}}) At(i int) ast.Node  { return items[i] }
func (items {{.ListName}}) Len() int           { return len(items) }
func (items {{.ListName}}) NativeNode() string { return nativeNode([]{{.TypeName}}{}) }
`))

func main() {
	var out bytes.Buffer
	headerTemplate.Execute(&out, HeaderTemplateArgs{Timestamp: time.Now()})

	for _, name := range []string{"Expr", "Stmt", "Decl"} {
		listTemplate.Execute(&out, ListTemplateArgs{TypeName: "ast." + name, ListName: name + "List"})
	}
	for _, name := range []string{"Field", "Ident"} {
		listTemplate.Execute(&out, ListTemplateArgs{TypeName: "*ast." + name, ListName: name + "List"})
	}

	err := ioutil.WriteFile("goparser_generated.go", out.Bytes(), 0644)
	if err != nil {
		panic(err)
	}
}
